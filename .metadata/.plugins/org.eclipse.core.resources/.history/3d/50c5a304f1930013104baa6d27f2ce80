package no.hig.strand.lars.mtp;

import no.hig.strand.lars.mtp.TasksContract.ListEntry;
import no.hig.strand.lars.mtp.TasksContract.TaskEntry;
import no.hig.strand.lars.mtp.TasksContract.TaskTimeEntry;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public class TasksDb {

	TasksDbHelper mDbHelper;
	SQLiteDatabase mDb;
	
	public TasksDb(Context context) {
		mDbHelper = new TasksDbHelper(context);
	}
	
	public void open() {
		mDb = mDbHelper.getWritableDatabase();
	}
	
	public void close() {
		mDb.close();
	}
	
	/*
	 * Fetching queries
	 */
	public Cursor fetchLists() {
		return null;
	}
	
	
	
	public Cursor fetchListByDate(String date) {
		return null;
	}
	
	
	
	public Cursor fetchTasks() {
		return null;
	}
	
	
	
	public Cursor fetchTasksByDate(String date) {
		Cursor c = mDb.query(ListEntry.TABLE_NAME, 
				new String[] {ListEntry._ID, ListEntry.COLUMN_NAME_DATE}, 
				ListEntry.COLUMN_NAME_DATE + "=?", 
				new String[] {date},
				null, null, null);
		if (c.moveToFirst()) {
			String listId = c.getString(
					c.getColumnIndexOrThrow(ListEntry.COLUMN_NAME_DATE));
			c = mDb.query(TaskEntry.TABLE_NAME, 
					null, 
					TaskEntry.COLUMN_NAME_LIST + "=?", 
					new String[] {listId},
					null, null, null);
			return c;
		}
		return null;
	}
	
	
	
	/*
	 * Deletion queries
	 */
	public boolean deleteListByDate(String date) {
		return false;
	}
	
	public boolean deleteTaskById(int taskId) {
		return false;
	}
	
	
	
	/*
	 * Insertion queries
	 */
	public long insertList(String date) {
		ContentValues values = new ContentValues();
		values.put(ListEntry.COLUMN_NAME_DATE, date);
		return mDb.insert(ListEntry.TABLE_NAME, null, values);
	}
	
	
	
	public long insertTask(long listId, Task task) {
		ContentValues values = new ContentValues();
		values.put(TaskEntry.COLUMN_NAME_LIST, listId);
		values.put(TaskEntry.COLUMN_NAME_CATEGORY, task.getCategory());
		values.put(TaskEntry.COLUMN_NAME_DESCRIPTION, task.getDescription());
		values.put(TaskEntry.COLUMN_NAME_LOCATION_LAT, 
				task.getLocation().latitude);
		values.put(TaskEntry.COLUMN_NAME_LOCATION_LNG, 
				task.getLocation().longitude);
		values.put(TaskEntry.COLUMN_NAME_ADDRESS, task.getAddress());
		values.put(TaskEntry.COLUMN_NAME_IS_ACTIVE, task.isActive());
		values.put(TaskEntry.COLUMN_NAME_TIME_START, task.getTimeStarted());
		values.put(TaskEntry.COLUMN_NAME_TIME_END, task.getTimeEnded());
		values.put(TaskEntry.COLUMN_NAME_TIME_SPENT, task.getTimeSpent());
		values.put(TaskEntry.COLUMN_NAME_IS_FINISHED, task.isFinished());
		long taskId = mDb.insert(TaskEntry.TABLE_NAME, null, values);
		if (! task.getFixedStart().equals("")) {
			values.clear();
			values.put(TaskTimeEntry.COLUMN_NAME_TASK_ID, taskId);
			values.put(TaskTimeEntry.COLUMN_NAME_START_TIME, 
					task.getFixedStart());
			values.put(TaskTimeEntry.COLUMN_NAME_END_TIME, task.getFixedEnd());
			mDb.insert(TaskTimeEntry.TABLE_NAME, null, values);
		}
		
		return taskId;
	}
	
}
