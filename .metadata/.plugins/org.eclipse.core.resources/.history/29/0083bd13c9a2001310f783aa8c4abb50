package no.hig.strand.lars.todoity;

import java.io.IOException;
import java.util.ArrayList;

import no.hig.strand.lars.todoity.taskentityendpoint.Taskentityendpoint;
import no.hig.strand.lars.todoity.taskentityendpoint.model.TaskEntity;
import android.os.AsyncTask;

import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.json.jackson.JacksonFactory;


/**
 * Class for holding common Google App Engine calls.
 * @author LarsErik
 *
 */
public final class AppEngineUtilities {
	
	
	public static class SaveTask extends AsyncTask<ArrayList<Task>, Void, Void> {
		
		@Override
		protected Void doInBackground(ArrayList<Task>... params) {
			ArrayList<Task> tasks = params[0];
			// Save task externally to AppEngine
			Taskentityendpoint.Builder endpointBuilder = 
					new Taskentityendpoint.Builder(
							AndroidHttp.newCompatibleTransport(), 
							new JacksonFactory(), null);
			Taskentityendpoint endpoint = CloudEndpointUtils
					.updateBuilder(endpointBuilder).build();
			for (Task task : tasks) {
				TaskEntity taskEntity;
				taskEntity = new TaskEntity();
				taskEntity.setCategory(task.getCategory())
						.setDescription(task.getDescription())
						.setLatitude(task.getLocation().latitude)
						.setLongitude(task.getLocation().longitude)
						.setAddress(task.getAddress())
						.setActive(task.isActive())
						.setTimeStarted(task.getTimeStarted())
						.setTimeEnded(task.getTimeEnded())
						.setTimeSpent(task.getTimeSpent())
						.setFinished(task.isFinished())
						.setFixedStart(task.getFixedStart())
						.setFixedEnd(task.getFixedEnd());
				try {
					taskEntity = endpoint.insertTaskEntity(taskEntity).execute();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			return null;
		}
	}
	
	
	
	public static class GetTask extends AsyncTask<Long, Void, TaskEntity> {

		@Override
		protected TaskEntity doInBackground(Long... params) {
			long taskId = params[0];
			Taskentityendpoint.Builder endpointBuilder = 
					new Taskentityendpoint.Builder(
							AndroidHttp.newCompatibleTransport(), 
							new JacksonFactory(), null);
			Taskentityendpoint endpoint = CloudEndpointUtils
					.updateBuilder(endpointBuilder).build();
			try {
				TaskEntity task = endpoint.getTaskEntity(taskId).execute();
				return task;
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}
		
	}
	
	
	
	public static class UpdateTask extends AsyncTask<Long, Void, Void> {
		
		@Override
		protected Void doInBackground(Long... params) {
			long taskId = params[0];
			Taskentityendpoint.Builder endpointBuilder = 
					new Taskentityendpoint.Builder(
							AndroidHttp.newCompatibleTransport(), 
							new JacksonFactory(), null);
			Taskentityendpoint endpoint = CloudEndpointUtils
					.updateBuilder(endpointBuilder).build();
			try {
				TaskEntity task = endpoint.getTaskEntity(taskId).execute();
				task = endpoint.updateTaskEntity(task).execute();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}
	}
	
	
	
	public static class RemoveTask extends AsyncTask<Long, Void, Void> {
		
		@Override
		protected Void doInBackground(Long... params) {
			Long taskId = params[0];
			Taskentityendpoint.Builder endpointBuilder = 
					new Taskentityendpoint.Builder(
							AndroidHttp.newCompatibleTransport(), 
							new JacksonFactory(), null);
			Taskentityendpoint endpoint = CloudEndpointUtils
					.updateBuilder(endpointBuilder).build();
			try {
				endpoint.removeTaskEntity(taskId).execute();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return null;
		}
	}
}
