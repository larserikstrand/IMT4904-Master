package no.hig.strand.lars.todoity.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;

import no.hig.strand.lars.todoity.Task;
import no.hig.strand.lars.todoity.TasksDb;
import no.hig.strand.lars.todoity.utils.Utilities;
import android.annotation.SuppressLint;
import android.app.Service;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.os.IBinder;
import android.widget.Toast;

public class RecommenderService extends Service implements
		GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener,
		LocationListener {

	private TasksDb mTasksDb;
	private ArrayList<Task> mGeofencedTasks;
	private LocationClient mLocationClient;
	
	
	// The number of days forward in time in which to apply geofencing for
	//  the tasks, including 'today' (i.e. only 'today' means a value of 1).
	private static final int NUMBER_OF_GEOFENCE_DAYS = 4;
	
	
	
	@Override
	public void onCreate() {
		super.onCreate();
		
		mTasksDb = TasksDb.getInstance(this);
		mLocationClient = new LocationClient(this, this, this);
		mLocationClient.connect();
	}

	
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}

	
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		
		getTasksForGeofence();
		
		return START_STICKY;
	}

	
	
	@SuppressLint("SimpleDateFormat")
	private void getTasksForGeofence() {
		SimpleDateFormat formatter = 
				new SimpleDateFormat("EEEE, MMM dd, yyyy");
		Calendar c = Calendar.getInstance();
		String date;
		ArrayList<Task> tasks;
		for (int i = 0; i < NUMBER_OF_GEOFENCE_DAYS; i++) {
			date = formatter.format(c.getTime());
			tasks = mTasksDb.getTasksByDate(date);
			for (Task task : tasks) {
				mGeofencedTasks.add(task);
			}
			c.add(Calendar.DATE, 1);
		}
	}
	
	
	
	@Override
	public void onLocationChanged(Location location) {}



	@Override
	public void onConnectionFailed(ConnectionResult connectionResult) {}



	@Override
	public void onConnected(Bundle bundle) {
		Geofence geofence = new Geofence.Builder().setRequestId("")
				.setTransitionTypes(1)
				.setCircularRegion(0, 0, 0)
				.setExpirationDuration(0).build();
		
		mLocationClient.
	}



	@Override
	public void onDisconnected() {}
	
	
	
	@Override
	public IBinder onBind(Intent arg0) {
		return null;
	}


}
