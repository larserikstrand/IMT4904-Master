package no.hig.strand.lars.todoity.services;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import no.hig.strand.lars.todoity.MainActivity;
import no.hig.strand.lars.todoity.R;
import no.hig.strand.lars.todoity.Task;
import no.hig.strand.lars.todoity.TasksContract.ContextEntry;
import no.hig.strand.lars.todoity.TasksDb;
import no.hig.strand.lars.todoity.utils.AppEngineUtilities.SaveContext;
import no.hig.strand.lars.todoity.utils.Utilities.Installation;
import android.app.Notification;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.database.Cursor;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.util.SparseArray;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.location.ActivityRecognitionClient;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;

public class ContextService extends Service implements
		GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener,
		LocationListener {

	LocationClient locationClient;
	LocationRequest locationRequest;
	PendingIntent activityRecognitionPendingIntent;
	ActivityRecognitionClient activityRecognitionClient;
	TasksDb tasksDb;
	ArrayList<Task> tasks;
	SparseArray<List<String>> locations;
	SparseArray<List<String>> activities;
	boolean locationInProgress;
	boolean activityInProgress;
	
	// TODO change values to something appropriate.
	private static final long LOCATION_UPDATE_INTERVAL = 1000*60;
	private static final long FASTEST_LOCATION_INTERVAL = 1000*5;
	private static final long ACTIVITY_DETECTION_INTERVAL = 1000*1;

	public static final int NOTIFICATION_ID = 4723;
	
	
	@Override
	public void onCreate() {
		super.onCreate();
		
		tasksDb = TasksDb.getInstance(this);
		locations = new SparseArray<List<String>>();
		activities = new SparseArray<List<String>>();
		
		// Instantiating the location client
		locationClient = new LocationClient(this, this, this);
		locationRequest = LocationRequest.create();
		locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
		locationRequest.setInterval(LOCATION_UPDATE_INTERVAL);
		locationRequest.setFastestInterval(FASTEST_LOCATION_INTERVAL);
		
		// Instantiating the activity recognition client.
		activityRecognitionClient = 
				new ActivityRecognitionClient(this, this, this);
		Intent intent = new Intent(this, ActivityRecognitionIntentService.class);
		activityRecognitionPendingIntent = PendingIntent.getService(
				this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
		locationInProgress = false;
		activityInProgress = false;
		
		// TODO ActivityRecognition should be handled here.. Shouldn't need its own service...
	}



	@Override
	public void onDestroy() {
		locationInProgress = false;
		activityInProgress = false;
		
		if (locationClient != null) {
			locationClient.removeLocationUpdates(this);
			locationClient = null;
		}
		if (activityRecognitionClient != null) {
			activityRecognitionClient.removeActivityUpdates(
					activityRecognitionPendingIntent);
			activityRecognitionClient = null;
		}
		
		super.onDestroy();
	}
	


	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		super.onStartCommand(intent, flags, startId);
		
		startServiceInForeground();
		
		setupClientsIfNeeded();
		
		if (! locationClient.isConnected() ||
				! locationClient.isConnecting() &&
				! locationInProgress) {
			locationInProgress = true;
			locationClient.connect();
		}
		
		if (! activityRecognitionClient.isConnected() ||
				! activityRecognitionClient.isConnecting() && 
				! activityInProgress) {
			activityInProgress = true;
			activityRecognitionClient.connect();
		}
		
		return START_REDELIVER_INTENT;
	}


	
	private void startServiceInForeground() {
		Intent i = new Intent(this, MainActivity.class);
        i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | 
        		Intent.FLAG_ACTIVITY_SINGLE_TOP);
        PendingIntent pi = PendingIntent.getActivity(this, 0, i, 0);
        
        final Notification note = new NotificationCompat.Builder(this)
                .setContentTitle(
                		getString(R.string.contextservice_notification_title))
                .setContentText(
                		getString(R.string.contextservice_notification_message))
                .setSmallIcon(R.drawable.servicerunninganim)
                .setContentIntent(pi)
                .build();
        note.flags |= Notification.FLAG_NO_CLEAR;
        
        startForeground(NOTIFICATION_ID, note);
	}
	
	
	
	private void setupClientsIfNeeded() {
		if (locationClient == null) {
			locationClient = new LocationClient(this, this, this);
		}
		if (activityRecognitionClient == null) {
			activityRecognitionClient = 
					new ActivityRecognitionClient(this, this, this);
		}
	}
	
	

	@Override
	public void onConnectionFailed(ConnectionResult connectionResult) {}



	@Override
	public void onConnected(Bundle dataBundle) {
		if (locationClient.isConnected()) {
			locationClient.requestLocationUpdates(locationRequest, this);
		}
		if (activityRecognitionClient.isConnected()) {
			activityRecognitionClient.requestActivityUpdates(
					ACTIVITY_DETECTION_INTERVAL,
					activityRecognitionPendingIntent);
		}
	}



	@Override
	public void onDisconnected() {
		locationInProgress = false;
		locationClient = null;
		activityInProgress = false;
		activityRecognitionClient = null;
	}



	@Override
	public void onLocationChanged(Location location) {
		// Get the task registered as active.
		tasks = tasksDb.getActiveTasks();
		// A "failsafe" to make sure the service is stopped if there are
		//  no active tasks.
		if (tasks.isEmpty()) {
			stopSelf();
		}
		for (Task t : tasks) {
			ArrayList<String> taskLocations  = new ArrayList<String>();
			ArrayList<String> taskActivities = new ArrayList<String>();
			// For each task, get the previously stored contexts (if any).
			Cursor c = tasksDb.fetchContextsByTaskId(t.getId());
			if (c != null && c.moveToFirst()) {
				do {
					String type = c.getString(c.getColumnIndexOrThrow(
							ContextEntry.COLUMN_NAME_TYPE));
					String context = c.getString(c.getColumnIndexOrThrow(
							ContextEntry.COLUMN_NAME_CONTEXT));
					if (type.equals(ContextEntry.TYPE_LOCATION)) {
						taskLocations.add(context);
					} else {
						taskActivities.add(context);
					}
				} while (c.moveToNext());
			}
			locations.put(t.getId(), taskLocations);
			activities.put(t.getId(), taskActivities);
		}
		
		// Get the address of the registered location.
		Geocoder geocoder = new Geocoder(this);
		List<Address> addresses = null;
		try {
			addresses = geocoder.getFromLocation(
					location.getLatitude(), location.getLongitude(), 1);
		} catch (IOException e) {
			Log.e("MTP ContextService", "IO Exception in onLocationChanged()");
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			Log.e("MTP ContextService", "Illegal arguments " + 
					Double.toString(location.getLatitude()) + ", " +
					Double.toString(location.getLongitude()) +
					" passed to address service");
			e.printStackTrace();
		}
		if (addresses != null && addresses.size() > 0) {
			Address address = addresses.get(0);
			String addressText = "";
			for (int i = 0; i < address.getMaxAddressLineIndex(); i++) {
				addressText += address.getAddressLine(i);
				if (i < address.getMaxAddressLineIndex() -1) {
					addressText += ", ";
				}
			}
			
			// Check if this address has been stored for this task before.
			for (Task t : tasks) {
				boolean newLocation = true;
				for (String loc : locations.get(t.getId())) {
					if (loc.equals(addressText)) {
						newLocation = false;
					}
				}
				// New location address (context) for this task, save to db.
				if (newLocation) {
					tasksDb.insertContext(t.getId(),
							ContextEntry.TYPE_LOCATION, addressText);
					new SaveContext(Installation.id(this) + " " + t.getId(), 
							ContextEntry.TYPE_LOCATION, addressText).execute();
				}
			}
			
			
		}
	}



	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

}
