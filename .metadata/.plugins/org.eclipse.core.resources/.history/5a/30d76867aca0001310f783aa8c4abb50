package no.hig.strand.lars.todoity;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import no.hig.strand.lars.todoity.TasksContract.ListEntry;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.Fragment;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.ExpandableListView;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;

public class WeekFragment extends Fragment {

	private View mRootView;
	private WeekListAdapter mAdapter;
	private List<String> mDates;
	private HashMap<String, List<Task>> mTasks;
	private String mSelectedDate;
	// Variables for getting the selected group and child. (Hacky, but works!).
	private int mSelectedGroup;
	private int mSelectedTask;
	
	// The amount of days to show in the week 
	//  list (ie. one week from 'tomorrow').
	private static final int NUMBER_OF_DAYS = 7;
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.fragment_week,
				container, false);
		
		mRootView = rootView;
		
		setupUI();
		
		return rootView;
	}
	
	
	
	@Override
	public void onResume() {
		super.onResume();
		if (getUserVisibleHint()) {
			new LoadWeekListFromDatabase().execute();
		}
	}
	
	
	
	@Override
	public void onPause() {
		if (! getUserVisibleHint()) {
			super.onPause();
		}
	}
	
	
	
	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		String[] tag = ((String) v.getTag()).split("\\s+");
		mSelectedGroup = Integer.valueOf(tag[0]);
		mSelectedTask = Integer.valueOf(tag[1]);
		mSelectedDate = mDates.get(mSelectedGroup);
		MenuInflater inflater = getActivity().getMenuInflater();
		inflater.inflate(R.menu.context_menu_task, menu);
	}
	
	
	
	@Override
	public boolean onContextItemSelected(MenuItem item) {
		if (getUserVisibleHint() == false) {
			return false;
		}
		switch (item.getItemId()) {
		case R.id.move_task:
			DialogFragment dpf = new MainActivity.DatePickerFragment();
			dpf.setTargetFragment(this, 0);
			dpf.show(getActivity().getSupportFragmentManager(), "datePicker");
			return true;
		case R.id.delete_task:
			int taskId = mTasks.get(mSelectedDate).get(mSelectedTask).getId();
			new MainActivity.DeleteTaskFromDatabase(getActivity(), 
					new MainActivity.DeletionFragmentCallback() {
				@Override
				public void onDeletionDone() {
					new LoadWeekListFromDatabase().execute();
				}
			}).execute(taskId);
			return true;
		}
		return super.onContextItemSelected(item);
	}
	
	
	
	private void setupUI() {
		Button button = (Button) mRootView.findViewById(R.id.new_list_button);
		button.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				startActivity(new Intent(getActivity(), ListActivity.class));
			}
		});
	}
	
	
	
	public void onDateSet(String date) {
		if (! date.equals(mSelectedDate)) {
			new MoveTaskToDate().execute(date);
		}
	}
	
	
	
	private class LoadWeekListFromDatabase extends AsyncTask<Void, Void, Void> {
		TasksDb tasksDb;
		List<String> dates;
		HashMap<String, List<Task>> tasks;

		@SuppressLint("SimpleDateFormat")
		@Override
		protected Void doInBackground(Void... params) {
			tasksDb = new TasksDb(getActivity());
			tasksDb.open();
			
			dates = new ArrayList<String>();
			tasks = new HashMap<String, List<Task>>();
			
			SimpleDateFormat formatter = 
					new SimpleDateFormat("EEEE, MMM dd, yyyy");
			Calendar c = Calendar.getInstance();
			String date;
			List<Task> dateTasks;
			for (int i = 0; i < NUMBER_OF_DAYS; i++) {
				c.add(Calendar.DATE, 1);
				date = formatter.format(c.getTime());
				dateTasks = tasksDb.getTasksByDate(date);
				if (! dateTasks.isEmpty()) {
					dates.add(date);
					tasks.put(date, dateTasks);
				}
			}
			mDates = dates;
			mTasks = tasks;
			tasksDb.close();
			
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			ExpandableListView list = (ExpandableListView) mRootView
					.findViewById(R.id.week_list);
			mAdapter = new WeekListAdapter(getActivity(), dates, tasks);
			list.setAdapter(mAdapter);
		}
	}
	
	
	
	private class MoveTaskToDate extends AsyncTask<String, Void, Void> {
		private TasksDb tasksDb;

		@Override
		protected Void doInBackground(String... params) {
			String moveToDate = params[0];
			Task task = mTasks.get(mSelectedDate).get(mSelectedTask);
			
			tasksDb = new TasksDb(getActivity());
			tasksDb.open();
			
			// Move the task to the selected date. 
			//  Create list on that date if none exist.
			long listId = -1;
			Cursor c = tasksDb.fetchListByDate(moveToDate);
			if (c.moveToFirst()) {
				listId = c.getLong(c.getColumnIndexOrThrow(ListEntry._ID));
			} else {
				listId = tasksDb.insertList(moveToDate);
			}
			if (mTasks.get(mSelectedDate).size() == 1) {
				tasksDb.deleteListByDate(mSelectedDate);
			} else {
				tasksDb.deleteTaskById(task.getId());
			}
			tasksDb.insertTask(listId, task);
			
			tasksDb.close();
			
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			new LoadWeekListFromDatabase().execute();
		}
		
	}
	
	
	
	private class WeekListAdapter extends BaseExpandableListAdapter {
		private Context context;
		private List<String> groupDates;
		private HashMap<String, List<Task>> tasks;
		
		
		public WeekListAdapter(Context context, List<String> groupDates, 
				HashMap<String, List<Task>> tasks) {
			this.context = context;
			this.groupDates = groupDates;
			this.tasks = tasks;
		}
		
		@Override
		public Object getChild(int groupPosition, int childPosition) {
			return tasks.get(groupDates.get(groupPosition)).get(childPosition);
		}

		@Override
		public long getChildId(int groupPosition, int childPosition) {
			return childPosition;
		}

		@Override
		public View getChildView(int groupPosition, int childPosition,
				boolean isLastChild, View convertView, ViewGroup parent) {
			Task task = (Task) getChild(groupPosition, childPosition);
			
			LayoutInflater inflater = (LayoutInflater) context
						.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = inflater.inflate(R.layout.item_week_list, null);
			convertView.setTag(groupPosition + " " + childPosition);
			registerForContextMenu(convertView);
			
			TextView taskText = (TextView) convertView
					.findViewById(R.id.task_text);
			taskText.setText(task.getCategory() + ": " + task.getDescription());
			TextView locationText = (TextView) convertView
					.findViewById(R.id.location_text);
			locationText.setText(task.getAddress());
			
			return convertView;
		}

		@Override
		public int getChildrenCount(int groupPosition) {
			return tasks.get(groupDates.get(groupPosition)).size();
		}

		@Override
		public Object getGroup(int groupPosition) {
			return groupDates.get(groupPosition);
		}

		@Override
		public int getGroupCount() {
			return groupDates.size();
		}

		@Override
		public long getGroupId(int groupPosition) {
			return groupPosition;
		}

		@Override
		public View getGroupView(int groupPosition, boolean isExpanded,
				View convertView, ViewGroup parent) {
			String date = (String) getGroup(groupPosition);
			
			LayoutInflater inflater = (LayoutInflater) context
						.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = inflater.inflate(R.layout.group_week_list, null);
			
			TextView dateText = (TextView) convertView
					.findViewById(R.id.group_date_text);
			dateText.setText(date);
			
			ImageButton imageButton = (ImageButton) convertView
					.findViewById(R.id.group_edit_button);
			imageButton.setFocusable(false);
			imageButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					LinearLayout layout = (LinearLayout) v.getParent();
					TextView textView = (TextView) layout
							.findViewById(R.id.group_date_text);
					String date = textView.getText().toString();
					int index = groupDates.indexOf(date);
					ArrayList<Task> dateTasks = 
							(ArrayList<Task>) tasks.get(groupDates.get(index));
					
					Intent intent = new Intent(context, ListActivity.class);
					intent.putExtra(MainActivity.TASKS_EXTRA, dateTasks);
					intent.putExtra(MainActivity.DATE_EXTRA, date);
					startActivity(intent);
				}
			});
			
			imageButton = (ImageButton) convertView
					.findViewById(R.id.group_delete_button);
			imageButton.setFocusable(false);
			imageButton.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					LinearLayout layout = (LinearLayout) v.getParent();
					TextView textView = (TextView) layout
							.findViewById(R.id.group_date_text);
					mSelectedDate = textView.getText().toString();
					
					Utilities.showConfirmDialog(getActivity(), 
							getString(R.string.confirm), 
							getString(R.string.delete_list_message), 
							new Utilities.ConfirmDialogListener() {
						@Override
						public void PositiveClick(DialogInterface dialog, 
								int id) {
							if (getActivity() instanceof MainActivity) {
								MainActivity activity = 
										(MainActivity) getActivity();
								activity.new DeleteListFromDatabase()
										.execute(mSelectedDate);
							}
						}
					});
				}
			});
			
			return convertView;
		}

		@Override
		public boolean hasStableIds() {
			return false;
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return true;
		}

	}
	
}
