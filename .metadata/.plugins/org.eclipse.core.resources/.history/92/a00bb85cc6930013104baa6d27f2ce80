package no.hig.strand.lars.mtp;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.NavUtils;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;

public class ListActivity extends FragmentActivity {
	
	private ArrayList<Task> mTasks;
	private TaskListAdapter mAdapter;
	private TasksDb mTasksDb;
	
	public static final int TASK_REQUEST = 1;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list);
		// Show the Up button in the action bar.
		setupActionBar();
		
		mTasks = new ArrayList<Task>();
		mAdapter = new TaskListAdapter(this, mTasks);
		mTasksDb = new TasksDb(this);
		
		setupUI();
	}

	
	/**
	 * Set up the {@link android.app.ActionBar}.
	 */
	private void setupActionBar() {
		getActionBar().setDisplayHomeAsUpEnabled(true);
	}

	

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	
	
	private void setupUI() {
		Button button = (Button) findViewById(R.id.date_button);
		button.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				DialogFragment dpf = new DatePickerFragment();
				dpf.show(getSupportFragmentManager(), "datePicker");
			}
		});
		
		button = (Button) findViewById(R.id.save_button);
		button.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				saveToDatabases();
			}
		});
		
		ImageButton imageButton = (ImageButton) findViewById(
				R.id.new_task_button);
		imageButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(ListActivity.this,
						NewTaskActivity.class);
				startActivityForResult(intent, TASK_REQUEST);
			}
		});
		
		ListView listView = (ListView) findViewById(R.id.tasklist_list);
		listView.setAdapter(mAdapter);
	}
	
	
	
	private void saveToDatabases() {
		// Check if a date is set.
		Button button = (Button) findViewById(R.id.date_button);
		String date = button.getText().toString();
		if (! date.equals(getString(R.string.set_date))) {
			ProgressDialog dialog = ProgressDialog.show(this, "", 
                    "Saving. Please wait...", true);
			dialog.setIndeterminate(true);
			
			mTasksDb.open();
			long listId = mTasksDb.insertList(date);
			for (Task t : mTasks) {
				mTasksDb.insertTask(listId, t.getCategory(),
						t.getDescription(), t.getLocation().latitude,
						t.getLocation().longitude);
			}
			
			dialog.dismiss();
			finish();
		}
	}
	
	
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode,
			Intent data) {
		if (requestCode == TASK_REQUEST) {
			if (resultCode == RESULT_OK) {
				Task task = data.getParcelableExtra(NewTaskActivity.TASK_EXTRA);
				mTasks.add(task);
				mAdapter = new TaskListAdapter(this, mTasks);
				ListView listView = (ListView) findViewById(R.id.tasklist_list);
				listView.setAdapter(mAdapter);
			}
		}
		super.onActivityResult(requestCode, resultCode, data);
	}
	
	
	
	
	public static class DatePickerFragment extends DialogFragment 
			implements DatePickerDialog.OnDateSetListener {
		
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			final Calendar c = Calendar.getInstance();
			int year = c.get(Calendar.YEAR);
			int month = c.get(Calendar.MONTH);
			int day = c.get(Calendar.DAY_OF_MONTH);
			
			DatePickerDialog dpd = new DatePickerDialog(getActivity(), 
					this, year, month, day);
			dpd.getDatePicker().setMinDate(c.getTimeInMillis());
			
			return dpd;
		}

		@SuppressLint("SimpleDateFormat")
		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear,
				int dayOfMonth) {
			SimpleDateFormat formatter = new SimpleDateFormat("EEEE, MMM dd, yyyy");
			Calendar c = new GregorianCalendar(year, monthOfYear, dayOfMonth);
			
			Button button = (Button) getActivity()
					.findViewById(R.id.date_button);
			button.setText(formatter.format(c.getTime()));
		}
		
	}
	
	
	
	private class TaskListAdapter extends ArrayAdapter<Task> {
		private final Context context;
		private final ArrayList<Task> tasks;
		
		public TaskListAdapter(Context context, ArrayList<Task> tasks) {
			super(context, R.layout.item_list_task, tasks);
			this.context = context;
			this.tasks = tasks;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			LayoutInflater inflater = (LayoutInflater) context
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			View rowView = inflater.inflate(R.layout.item_list_task,
					parent, false);
			TextView taskText = (TextView) rowView.findViewById(R.id.task_text);
			taskText.setText(tasks.get(position).getCategory() + ": "
							+ tasks.get(position).getDescription());
			TextView locationText = (TextView) rowView
					.findViewById(R.id.location_text);
			locationText.setText(tasks.get(position).getAddress());
			
			ImageButton button = (ImageButton) rowView
					.findViewById(R.id.edit_button);
			button.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					LinearLayout layout = (LinearLayout) v.getParent();
					ListView listView = (ListView) layout.getParent();
					Intent intent = new Intent(context, NewTaskActivity.class);
					
				}
			});
			
			button = (ImageButton) rowView.findViewById(R.id.delete_button);
			button.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					// TODO delete task...
				}
			});
			
			return rowView;
		}
		
	}

}
