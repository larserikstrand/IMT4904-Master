package no.hig.strand.lars.todoity.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import no.hig.strand.lars.todoity.Task;
import no.hig.strand.lars.todoity.TasksDb;
import android.annotation.SuppressLint;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationStatusCodes;
import com.google.android.gms.location.LocationClient.OnAddGeofencesResultListener;
import com.google.android.gms.maps.model.LatLng;

public class GeofenceService extends Service implements
		GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener,
		OnAddGeofencesResultListener {

	private TasksDb mTasksDb;
	private ArrayList<Task> mGeofencedTasks;
	private LocationClient mLocationClient;
	
	
	// The number of days forward in time in which to apply geofencing for
	//  the tasks, including 'today' (i.e. only 'today' means a value of 1).
	private static final int NUMBER_OF_GEOFENCE_DAYS = 4;
	// Radius of geofences (in meters).
	private static final float GEOFENCE_RADIUS = 5000;
	
	private static final long GEOFENCE_DURATION = 
			1000 * 60 * 60 * 24 * NUMBER_OF_GEOFENCE_DAYS;
	
	
	
	@Override
	public void onCreate() {
		super.onCreate();
		
		mTasksDb = TasksDb.getInstance(this);
		mGeofencedTasks = new ArrayList<Task>();
		mLocationClient = new LocationClient(this, this, this);
		mLocationClient.connect();
	}

	
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}

	
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		
		getTasksForGeofence();
		
		return START_STICKY;
	}

	
	
	@SuppressLint("SimpleDateFormat")
	private void getTasksForGeofence() {
		SimpleDateFormat formatter = 
				new SimpleDateFormat("EEEE, MMM dd, yyyy");
		Calendar c = Calendar.getInstance();
		String date;
		ArrayList<Task> tasks;
		for (int i = 0; i < NUMBER_OF_GEOFENCE_DAYS; i++) {
			date = formatter.format(c.getTime());
			tasks = mTasksDb.getTasksByDate(date);
			for (Task task : tasks) {
				mGeofencedTasks.add(task);
			}
			c.add(Calendar.DATE, 1);
		}
	}
	
	
	
	@Override
	public void onConnectionFailed(ConnectionResult connectionResult) {}



	@Override
	public void onConnected(Bundle bundle) {
		
		Intent intent = new Intent(this, GeofenceTransitionIntentService.class);
		PendingIntent geofencePendingIntent = PendingIntent.getService(
				this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
		
		List<Geofence> geofences = new ArrayList<Geofence>();
		
		for (Task task : mGeofencedTasks) {
			if (! task.getLocation().equals(new LatLng(0, 0))) {
				Geofence geofence = new Geofence.Builder()
						.setRequestId(Integer.toString(task.getId()))
						.setTransitionTypes(Geofence.GEOFENCE_TRANSITION_ENTER)
						.setCircularRegion(task.getLocation().latitude, 
								task.getLocation().longitude, GEOFENCE_RADIUS)
						.setExpirationDuration(GEOFENCE_DURATION).build();
				geofences.add(geofence);
			}
		}
		if (geofences.size() > 0) {
			mLocationClient.addGeofences(geofences, geofencePendingIntent, this);
		} else {
			stopSelf();
		}
	}



	@Override
	public void onDisconnected() {
		mLocationClient = null;
	}
	
	
	
	@Override
	public void onAddGeofencesResult(int statusCode, 
			String[] geofenceRequestIds) {
		if (statusCode != LocationStatusCodes.SUCCESS) {
			Log.e("RecommenderService", "Location Services error: " +
					Integer.toString(statusCode));
		}
		
		mLocationClient.disconnect();
	}
	
	
	
	@Override
	public IBinder onBind(Intent arg0) {
		return null;
	}
}
