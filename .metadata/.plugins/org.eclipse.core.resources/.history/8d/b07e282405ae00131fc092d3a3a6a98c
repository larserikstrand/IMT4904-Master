package no.hig.strand.lars.todoity;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;

import no.hig.strand.lars.todoity.TodayFragment.TodayListAdapter;
import no.hig.strand.lars.todoity.utils.AppEngineUtilities;
import no.hig.strand.lars.todoity.utils.DatabaseUtilities;
import no.hig.strand.lars.todoity.utils.Utilities;
import no.hig.strand.lars.todoity.utils.DatabaseUtilities.DeleteTask;
import no.hig.strand.lars.todoity.utils.DatabaseUtilities.OnDeletionCallback;
import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.NavUtils;
import android.view.ContextMenu;
import android.view.LayoutInflater;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

public class ListActivity extends FragmentActivity {
	
	private ArrayList<Task> mTasks;
	private TaskListAdapter mAdapter;
	private String mDate;
	private boolean mIsEditing;
	private int mTempTaskNumber;
	
	public static final int TASK_REQUEST = 1;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_list);
		// Show the Up button in the action bar.
		setupActionBar();
		
		mTasks = new ArrayList<Task>();
		mDate = "";
		mIsEditing = false;
		mTempTaskNumber = -1;
		Intent data = getIntent();
		if (data.hasExtra(MainActivity.TASKS_EXTRA)) {
			mTasks = data.getParcelableArrayListExtra(MainActivity.TASKS_EXTRA);
			mDate = data.getStringExtra(MainActivity.DATE_EXTRA);
			mAdapter = new TaskListAdapter(this, mTasks);
			ListView listView = (ListView) findViewById(R.id.tasklist_list);
			listView.setAdapter(mAdapter);
		} else {
			mDate = Utilities.getTodayDate();
			new LoadTask().execute(mDate);
		}
		
		setupUI();
	}

	
	/**
	 * Set up the {@link android.app.ActionBar}.
	 */
	private void setupActionBar() {
		getActionBar().setDisplayHomeAsUpEnabled(true);
	}

	

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	
	
	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		mTempTaskNumber = (Integer) v.getTag();
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.context_menu_task, menu);
	}
	
	
	
	@Override
	public boolean onContextItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.move_task:
			DialogFragment dpf = new MainActivity.DatePickerFragment();
			Bundle bundle = new Bundle();
			bundle.putString("move", "move");
			dpf.setArguments(bundle);
			dpf.show(getSupportFragmentManager(), "datePicker");
			return true;
		case R.id.delete_task:
			new DeleteTask(getActivity(), mTasks.get(mSelectedTask),
					new OnDeletionCallback() {
				@Override
				public void onDeletionDone() {
					mTasks.remove(mSelectedTask);
					mAdapter = new TodayListAdapter(getActivity(), mTasks);
					ListView listView = (ListView) mRootView
							.findViewById(R.id.tasks_list);
					listView.setAdapter(mAdapter);
					((MainActivity)getActivity()).updateGeofences();
				}
			}).execute();
			return true;
		}
		return super.onContextItemSelected(item);
	}
	
	
	
	private void setupUI() {
		Button button = (Button) findViewById(R.id.date_button);
		button.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				DialogFragment dpf = new DatePickerFragment();
				dpf.show(getSupportFragmentManager(), "datePicker");
			}
		});
		
		button = (Button) findViewById(R.id.new_task_button);
		button.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(ListActivity.this,
						NewTaskActivity.class);
				startActivityForResult(intent, TASK_REQUEST);
			}
		});
		
		button = (Button) findViewById(R.id.done_button);
		button.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				finish();
			}
		});
	}
	
	
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode,
			Intent data) {
		if (requestCode == TASK_REQUEST) {
			if (resultCode == RESULT_OK) {
				Task task = data.getParcelableExtra(NewTaskActivity.TASK_EXTRA);
				task.setDate(mDate);
				if (mIsEditing) {
					mTasks.set(mTempTaskNumber, task);
					mIsEditing = false;
					new DatabaseUtilities.UpdateTask(this, task).execute();
					new AppEngineUtilities.UpdateTask(this, task).execute();
				} else {
					mTasks.add(task);
					new DatabaseUtilities.SaveTask(this, task).execute();
				}
				mAdapter = new TaskListAdapter(this, mTasks);
				ListView listView = (ListView) findViewById(R.id.tasklist_list);
				listView.setAdapter(mAdapter);
			}
		}
		super.onActivityResult(requestCode, resultCode, data);
	}
	
	
	
	
	public static class DatePickerFragment extends DialogFragment 
			implements DatePickerDialog.OnDateSetListener {
		
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			final Calendar c = Calendar.getInstance();
			int year = c.get(Calendar.YEAR);
			int month = c.get(Calendar.MONTH);
			int day = c.get(Calendar.DAY_OF_MONTH);
			
			DatePickerDialog dpd = new DatePickerDialog(getActivity(), 
					this, year, month, day);
			dpd.getDatePicker().setMinDate(c.getTimeInMillis());
			
			return dpd;
		}

		@SuppressLint("SimpleDateFormat")
		@Override
		public void onDateSet(DatePicker view, int year, int monthOfYear,
				int dayOfMonth) {
			SimpleDateFormat formatter = 
					new SimpleDateFormat("EEEE, MMM dd, yyyy");
			Calendar c = new GregorianCalendar(year, monthOfYear, dayOfMonth);
			
			// Just double check that the context is correct.
			if (getActivity() instanceof ListActivity) {
				ListActivity activity = (ListActivity) getActivity();
				String date = formatter.format(c.getTime());
				
				Button button = (Button) activity.findViewById(R.id.date_button);
				button.setText(date);
				activity.new LoadTask().execute(date);
			}
		}
		
	}
	
	
	
	private class LoadTask extends AsyncTask<String, Void, Void> {
		
		@Override
		protected Void doInBackground(String... params) {
			String date = params[0];
			TasksDb tasksDb = TasksDb.getInstance(ListActivity.this);
			mTasks = tasksDb.getTasksByDate(date);
			
			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			mAdapter = new TaskListAdapter(ListActivity.this, mTasks);
			ListView listView = (ListView) findViewById(R.id.tasklist_list);
			listView.setAdapter(mAdapter);
		}
		
	}
	
	
	
	private class TaskListAdapter extends ArrayAdapter<Task> {
		private final Context context;
		private final ArrayList<Task> tasks;
		
		public TaskListAdapter(Context context, ArrayList<Task> tasks) {
			super(context, R.layout.item_list_task, tasks);
			this.context = context;
			this.tasks = tasks;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			LayoutInflater inflater = (LayoutInflater) context
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			View rowView = inflater.inflate(R.layout.item_list_task,
					parent, false);
			rowView.setTag(position);
			registerForContextMenu(rowView);
			
			if (tasks.get(position).isFinished()) {
				return null;
			}
			
			TextView taskText = (TextView) rowView.findViewById(R.id.task_text);
			taskText.setText(tasks.get(position).getCategory() + ": "
							+ tasks.get(position).getDescription());
			TextView locationText = (TextView) rowView
					.findViewById(R.id.location_text);
			locationText.setText(tasks.get(position).getAddress());
			
			// Set up behavior of the edit task button.
			ImageButton button = (ImageButton) rowView
					.findViewById(R.id.edit_button);
			button.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					LinearLayout layout = (LinearLayout) v.getParent();
					int position = (Integer) layout.getTag();
					
					mTempTaskNumber = position;
					mIsEditing = true;
					Intent intent = new Intent(context, NewTaskActivity.class);
					intent.putExtra(NewTaskActivity.TASK_EXTRA,
							mTasks.get(position));
					startActivityForResult(intent, TASK_REQUEST);
				}
			});
			
			// Set up behavior of the delete task button.
			button = (ImageButton) rowView.findViewById(R.id.remove_button);
			button.setOnClickListener(new OnClickListener() {
				@Override
				public void onClick(View v) {
					LinearLayout layout = (LinearLayout) v.getParent();
					ListView listView = (ListView) layout.getParent();
					int position = (Integer) layout.getTag();
					
					mTasks.remove(position);
					listView.setAdapter(new TaskListAdapter(context, mTasks));
				}
			});
			
			
			
			return rowView;
		}
		
	}

}
