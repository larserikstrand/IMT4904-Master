package no.hig.strand.lars.mtp.services;

import java.io.IOException;
import java.util.List;

import android.app.PendingIntent;
import android.app.Service;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.os.Bundle;
import android.os.IBinder;
import android.os.ResultReceiver;
import android.util.Log;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.location.ActivityRecognitionClient;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;

public class ContextService extends Service implements
		GooglePlayServicesClient.ConnectionCallbacks,
		GooglePlayServicesClient.OnConnectionFailedListener,
		LocationListener {

	ResultReceiver resultReceiver;
	LocationClient locationClient;
	LocationRequest locationRequest;
	PendingIntent activityRecognitionPendingIntent;
	ActivityRecognitionClient activityRecognitionClient;
	boolean inProgress;

	
	private static final int NOTIFICATION_ID = 1984;
	
	private static final long LOCATION_UPDATE_INTERVAL = 1000*10;
	private static final long FASTEST_LOCATION_INTERVAL = 1000*5;
	private static final long ACTIVITY_DETECTION_INTERVAL = 1000*1;

	
	
	@Override
	public void onCreate() {
		super.onCreate();
		
		// Instantiating the location client
		locationClient = new LocationClient(this, this, this);
		locationRequest = LocationRequest.create();
		locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
		locationRequest.setInterval(LOCATION_UPDATE_INTERVAL);
		locationRequest.setFastestInterval(FASTEST_LOCATION_INTERVAL);
		
		// Instantiating the activity recognition client.
		activityRecognitionClient = 
				new ActivityRecognitionClient(this, this, this);
		Intent intent = new Intent(this, ActivityRecognitionIntentService.class);
		activityRecognitionPendingIntent = PendingIntent.getService(
				this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
		inProgress = false;
		
		// TODO ActivityRecognition should be handled here.. Shouldn't need its own service...
	}



	@Override
	public void onDestroy() {
		if (locationClient.isConnected()) {
			locationClient.removeLocationUpdates(this);
		}
		locationClient.disconnect();
		
		super.onDestroy();
	}
	


	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		
		locationClient.connect();
		if (! inProgress) {
			inProgress = true;
			activityRecognitionClient.connect();
		}
		
		return START_REDELIVER_INTENT;
	}



	@Override
	public void onConnectionFailed(ConnectionResult connectionResult) {}



	@Override
	public void onConnected(Bundle dataBundle) {
		if (locationClient.isConnected()) {
			locationClient.requestLocationUpdates(locationRequest, this);
		}
		if (activityRecognitionClient.isConnected()) {
			activityRecognitionClient.requestActivityUpdates(
					ACTIVITY_DETECTION_INTERVAL,
					activityRecognitionPendingIntent);
			inProgress = false;
			activityRecognitionClient.disconnect();
		}
	}



	@Override
	public void onDisconnected() {
		inProgress = false;
		activityRecognitionClient = null;
	}



	@Override
	public void onLocationChanged(Location location) {
		// TODO store location...
		Geocoder geocoder = new Geocoder(this);
		List<Address> addresses = null;
		try {
			addresses = geocoder.getFromLocation(
					location.getLatitude(), location.getLongitude(), 1);
		} catch (IOException e) {
			Log.e("MTP ContextService", "IO Exception in onLocationChanged()");
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			Log.e("MTP ContextService", "Illegal arguments " + 
					Double.toString(location.getLatitude()) + ", " +
					Double.toString(location.getLongitude()) +
					" passed to address service");
			e.printStackTrace();
		}
		if (addresses != null && addresses.size() > 0) {
			Address address = addresses.get(0);
			String addressText = "";
			for (int i = 0; i < address.getMaxAddressLineIndex(); i++) {
				addressText += address.getAddressLine(i);
				if (i < address.getMaxAddressLineIndex() -1) {
					addressText += ", ";
				}
			}
			
			Bundle bundle = new Bundle();
			bundle.putString("address", addressText);
			resultReceiver.send(100, bundle);
		}
	}



	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

}
